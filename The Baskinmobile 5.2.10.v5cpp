{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nbumper GroundBumCtrl = bumper(Brain.ThreeWirePort.A);\nbumper OneBumCtrl = bumper(Brain.ThreeWirePort.B);\nbumper TwoBumCtrl = bumper(Brain.ThreeWirePort.C);\nmotor Motor1 = motor(PORT1, ratio18_1, false);\n\nlimit OneLim = limit(Brain.ThreeWirePort.D);\nlimit TwoLim = limit(Brain.ThreeWirePort.E);\nbumper GroundBum = bumper(Brain.ThreeWirePort.F);\nbumper TwoBumElev = bumper(Brain.ThreeWirePort.G);\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint touchX = 0;\nint touchY = 0;\nint floorID = 0;\nchar* floorStr = \"Ground\";\n\nvoid initGUI() {\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1,1);\n  Brain.Screen.setFillColor(blue);\n  Brain.Screen.drawRectangle(0, 0, 500, 250);\n  Brain.Screen.setFillColor(green);\n  Brain.Screen.drawRectangle(200,0,50,250);\n  Brain.Screen.drawRectangle(300,0,50,250);\n  Brain.Screen.drawRectangle(400,0,50,250);\n  Brain.Screen.setFillColor(red);\n  Brain.Screen.print(\"Project 5.2.10\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Freight Elevator by AML\");\n  Brain.Screen.newLine();\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Floor ID: %d\", floorID);\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Floor: %s\", floorStr);\n  Brain.Screen.newLine();\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Touch X: %d\", touchX);\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Touch Y: %d\", touchY);\n  Brain.Screen.setCursor(7,19);\n  Brain.Screen.print(\"Ground\");\n\n  Brain.Screen.setCursor(7,32);\n  Brain.Screen.print(\"One\");\n\n  Brain.Screen.setCursor(7,42);\n  Brain.Screen.print(\"Two\");\n  Brain.Screen.setCursor(10,42);\n}\n\nvoid goFloorG() {\n  if(floorID == 0) return;\n  Motor1.spin(forward);\n  floorID = 0;\n  floorStr = \"Going to Ground\";\n  waitUntil(GroundBum.pressing());\n  floorStr = \"Ground\";\n  Motor1.stop();\n  Motor1.spin(reverse);\n    wait(150, msec);\n  Motor1.stop();\n}\n\nvoid goFloorOne() {\n  if(floorID == 1) return;\n  Motor1.spin(reverse);\n  waitUntil(!OneLim.pressing() || !TwoLim.pressing());\n  floorID = 1;\n  floorStr = \"Going to One\";\n  waitUntil(OneLim.pressing() || TwoLim.pressing());\n  Motor1.stop();\n  floorStr = \"One\";\n}\n\nvoid goFloorTwo() {\n  if(floorID == 2) return;\n  Motor1.spin(reverse);\n  floorID = 2;\n  floorStr = \"Going to Two\";\n  waitUntil(TwoBumElev.pressing());\n  floorStr = \"Two\";\n  Motor1.stop();\n}\n\nvoid touchProcess() {\n  // Control the screen for the elevator: when pressed in an area go to that floor\n  touchX = Brain.Screen.xPosition();\n  touchY = Brain.Screen.yPosition();\n  if(touchX > 200 && touchX < 250 && floorID != 0) {\n    goFloorG();\n  }\n  if(touchX > 300 && touchX < 400 && floorID != 1) {\n    goFloorOne();\n  }\n  if(touchX > 400 && touchX < 500 && floorID != 2) {\n    goFloorTwo();\n  }\n}\n\n// The Baskelevator\nint main() {  \n  Brain.Screen.released(touchProcess);\n  GroundBumCtrl.released(goFloorG);\n  OneBumCtrl.released(goFloorOne);\n  TwoBumCtrl.released(goFloorTwo);\n  while(true) {\n    initGUI();\n    wait(16, msec);\n  }\n  \n}\n","textLanguage":"cpp","rconfig":[{"port":[1],"name":"GroundBumCtrl","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[2],"name":"OneBumCtrl","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[3],"name":"TwoBumCtrl","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[1],"name":"Motor1","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[4],"name":"OneLim","customName":true,"deviceType":"LimitSwitch","deviceClass":"limit","setting":{},"triportSourcePort":22},{"port":[5],"name":"TwoLim","customName":true,"deviceType":"LimitSwitch","deviceClass":"limit","setting":{},"triportSourcePort":22},{"port":[6],"name":"GroundBum","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[7],"name":"TwoBumElev","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.6","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}