{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor Motorlol = motor(PORT1, ratio18_1, false);\n\nled LEDA = led(Brain.ThreeWirePort.A);\nbumper BumperB = bumper(Brain.ThreeWirePort.B);\npot PotentiometerC = pot(Brain.ThreeWirePort.C);\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// The Spinning Sign\n/*\nThis code will spin the motor, speed controlled by the potentiometer.\nThe bumper will control on/off, and the LED will indicate this.\nIn addition to this, the program will output useful debug information on the brain screen: \nthe potentiometer angle and if the sign is spinning.\n*/\nint velo = 0, row = 1; // Initialize velocity & row (for prnt) variables\nbool spinning = false;\nchar* spinny = \"It's not doing the spinny.\";\nvoid bumperCallback() { spinning = !spinning; }\nvoid brs() { Brain.Screen.clearScreen(); row = 1; }\nvoid scp() { spinny = \"baskin\"; }\n// C++ is weird: to use any argument this needs to be created\ntemplate <typename T>\nvoid prnt(T const & str) { Brain.Screen.print(str); Brain.Screen.setCursor(row,1); row++; }\n// ^ Basically a custom print function that auto scrolls\nint main() {\n  // Initialize the motor by just spinning, we'll control it later\n  Motorlol.spin(forward); \n  spinning = true;\n  LEDA.on();\n  BumperB.pressed(bumperCallback); // When bumper pressed, go to bumperCallback()\n  Brain.Screen.pressed(scp); // When screen pressed, write \"baskin\" to spinning var\n  while(true) {\n    velo = PotentiometerC.angle(percent); // Set velo to speed of potentiometer's angle\n    if(!spinning) velo = 0; //If bumper was pressed (spinning bool toggle), then just set velo to 0.\n    Motorlol.setVelocity(velo, percent); // Spin the motor at velo speed\n    // Now we're done spinning the motor, lets turn the LED on/off.\n    LEDA.off(); // Turn the LED off to make conditionals cleaner\n    spinny = \"It's not doing the spinny.\"; // Dynamically change the spinny var according with status\n    if (spinning) {\n      spinny = \"It's doing the spinny!\";\n      LEDA.on();\n    }\n    brs();\n    prnt(spinny);\n    prnt(\"Potentiometer Velo:\");\n    prnt(velo);\n    wait(0.05, seconds); // Prevents the funky blinking on the brain screen\n  }\n  return 0; // Exit gracefully\n}\n","textLanguage":"cpp","rconfig":[{"port":[1],"name":"Motorlol","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1],"name":"LEDA","customName":false,"deviceType":"LED","deviceClass":"led","setting":{},"triportSourcePort":22},{"port":[2],"name":"BumperB","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[3],"name":"PotentiometerC","customName":false,"deviceType":"Potentiometer","deviceClass":"pot","setting":{},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.6","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}