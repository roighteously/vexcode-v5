{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nbumper GroundBumCtrl = bumper(Brain.ThreeWirePort.A);\nbumper OneBumCtrl = bumper(Brain.ThreeWirePort.B);\nbumper TwoBumCtrl = bumper(Brain.ThreeWirePort.C);\nmotor Motor1 = motor(PORT1, ratio18_1, false);\n\nlimit OneLim = limit(Brain.ThreeWirePort.D);\nlimit TwoLim = limit(Brain.ThreeWirePort.E);\nbumper GroundBum = bumper(Brain.ThreeWirePort.F);\nbumper TwoBumElev = bumper(Brain.ThreeWirePort.G);\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// Initialize useful variables\nint touchX = 0;\nint touchY = 0;\nint floorID = 0;\nchar* floorStr = \"Ground\"; // We know we will start at Ground level\n\nvoid initGUI() { // This is the funky touch screen GUI that lets us visualize the cool things\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1,1);\n  Brain.Screen.setFillColor(blue);\n  Brain.Screen.drawRectangle(0, 0, 500, 250);\n  Brain.Screen.setFillColor(green);\n  Brain.Screen.drawRectangle(200,0,50,250);\n  Brain.Screen.drawRectangle(300,0,50,250);\n  Brain.Screen.drawRectangle(400,0,50,250);\n  Brain.Screen.setFillColor(red);\n  // Setup the cool background ^\n\n  // Now the text \\/\n  Brain.Screen.print(\"Project 5.2.10\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"The Baskelevator by AML\");\n  Brain.Screen.newLine();\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Floor ID: %d\", floorID); // Allow us to visualize floor internal ID\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Floor: %s\", floorStr); // Allow us to see the floor name (Ground, one, two)\n  Brain.Screen.newLine();\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Touch X: %d\", touchX); // Where we have touched the screen (X & Y)\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Touch Y: %d\", touchY);\n\n  // Label the touch screen buttons\n  Brain.Screen.setCursor(7,19);\n  Brain.Screen.print(\"Ground\");\n\n  Brain.Screen.setCursor(7,32);\n  Brain.Screen.print(\"One\");\n\n  Brain.Screen.setCursor(7,42);\n  Brain.Screen.print(\"Two\");\n  Brain.Screen.setCursor(10,42);\n}\n\nvoid goFloorG() {\n  if(floorID == 0) return;\n  Motor1.spin(reverse); // We know we will always need to go down as there is no lower floor\n  floorID = 0;\n  floorStr = \"Going to Ground\";\n  waitUntil(GroundBum.pressing()); \n  // Wait until ground sensor is pressed, now stop and go up a bit to ensure nothing is damaged.\n  floorStr = \"Ground\";\n  Motor1.stop();\n  Motor1.spin(forward);\n    wait(150, msec);\n  Motor1.stop();\n}\n\nvoid goFloorOne() {\n  if(floorID == 1) return; // Check if we are on floor 1, if not\n  Motor1.spin(reverse); // Go down (for coming from floor 2), however\n  if(floorID == 0)  { // if we're on floor 0/ground, go up\n    Motor1.spin(forward);\n  }\n  waitUntil(!OneLim.pressing() || !TwoLim.pressing()); // Make sure nothing is being pressed\n  floorID = 1;\n  floorStr = \"Going to One\";\n  waitUntil(OneLim.pressing() || TwoLim.pressing()); \n  // Now make sure sensors are pressed because for sure we are at the floor.\n  Motor1.stop();\n  floorStr = \"One\";\n}\n\nvoid goFloorTwo() {\n  if(floorID == 2) return; // Check to make sure we are already on floor 2, if not then continue\n  Motor1.spin(forward); // We know we need to go down as this is the highest floor\n  floorID = 2; // Set the floor ID\n  floorStr = \"Going to Two\";\n  waitUntil(TwoBumElev.pressing()); // Wait until the top sensor has been pressed\n  floorStr = \"Two\"; // Now we've arrived, stop the motor and display fancy text onscreen.\n  Motor1.stop();\n}\n\nvoid touchProcess() {\n  // Control the screen for the elevator: when pressed in an area go to that floor\n  touchX = Brain.Screen.xPosition();\n  touchY = Brain.Screen.yPosition();\n  if(touchX > 200 && touchX < 250 && floorID != 0) {\n    goFloorG(); // If we are not on floor 0, and screen is touched in the area of the button\n                // go to the ground floor.\n  }\n  if(touchX > 300 && touchX < 400 && floorID != 1) {\n    goFloorOne();// If we are not on floor 1, and screen is touched in the area of the button\n                // go to the first floor.\n  }\n  if(touchX > 400 && touchX < 500 && floorID != 2) {\n    goFloorTwo();// If we are not on floor 2, and screen is touched in the area of the button\n                // go to the second floor.\n  }\n}\n\n// The Baskelevator:\n// This elevator is one of the most elevating projects made in elevator history.\n// By allowing control from each floor, the elevator will go to said floor using sensors.\n// With a gimmick, touch controls, we have innovated the elevation industry to ensure we are the most\n// elevating elevator made for days where you need to be elevated.\nint main() {  \n  Brain.Screen.released(touchProcess); // When screen is pressed: process corresponding button\n  GroundBumCtrl.released(goFloorG); // When the Ground button is pressed, go to Ground floor.\n  OneBumCtrl.released(goFloorOne); // When the 1st floor button is pressed, go to 1st floor.\n  TwoBumCtrl.released(goFloorTwo); // When the 2nd floor button is pressed, go to 2nd floor.\n  while(true) {\n    initGUI(); // Make the screen draw :yay:\n    // Also allows us to have graphics and able to see where to press for touch controls\n    wait(16, msec); // Best possible refresh rate to make scanline as removable as possible\n  }\n  \n}\n","textLanguage":"cpp","rconfig":[{"port":[1],"name":"GroundBumCtrl","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[2],"name":"OneBumCtrl","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[3],"name":"TwoBumCtrl","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[1],"name":"Motor1","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[4],"name":"OneLim","customName":true,"deviceType":"LimitSwitch","deviceClass":"limit","setting":{},"triportSourcePort":22},{"port":[5],"name":"TwoLim","customName":true,"deviceType":"LimitSwitch","deviceClass":"limit","setting":{},"triportSourcePort":22},{"port":[6],"name":"GroundBum","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[7],"name":"TwoBumElev","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.6","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}