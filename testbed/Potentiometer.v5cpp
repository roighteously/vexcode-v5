{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor MotorR = motor(PORT1, ratio18_1, false);\n\nmotor MotorL = motor(PORT2, ratio18_1, false);\n\nled LEDA = led(Brain.ThreeWirePort.A);\nbumper BumperB = bumper(Brain.ThreeWirePort.B);\nlimit LimitSwitchD = limit(Brain.ThreeWirePort.D);\nline LineTrackerC = line(Brain.ThreeWirePort.C);\npot PotentiometerE = pot(Brain.ThreeWirePort.E);\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\nusing namespace std;\n\nint pe = PotentiometerE.angle(percent);\nvex::directionType rotType = forward;\n\nvoid getPotentiometer() {\n  pe = PotentiometerE.angle(percent);\n  if(BumperB.pressing()) rotType = reverse;\n  if(LimitSwitchD.pressing()) rotType = forward;\n\n  if(rotType == forward) pe = PotentiometerE.angle(percent);\n  if(rotType == reverse) pe = -PotentiometerE.angle(percent);\n}\n\nint main() {\n  MotorL.spin(forward);\n  MotorR.spin(forward);\n  MotorL.spinToPosition(100, degrees);\n  MotorL.stop();\n  MotorL.setStopping(coast);\n  MotorR.setStopping(coast);\n  MotorL.spin(forward);\n  wait(2, seconds);\n  while(true) {\n    \n    getPotentiometer();\n    MotorR.setVelocity(pe, percent);\n    MotorL.setVelocity(pe, percent);\n    Brain.Screen.clearScreen();\n    Brain.Screen.setCursor(1,1);\n    Brain.Screen.print(pe);\n    wait(5, msec);\n  }\n}","textLanguage":"cpp","rconfig":[{"port":[1],"name":"MotorR","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"MotorL","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1],"name":"LEDA","customName":false,"deviceType":"LED","deviceClass":"led","setting":{},"triportSourcePort":22},{"port":[2],"name":"BumperB","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[4],"name":"LimitSwitchD","customName":false,"deviceType":"LimitSwitch","deviceClass":"limit","setting":{},"triportSourcePort":22},{"port":[3],"name":"LineTrackerC","customName":false,"deviceType":"LineTracker","deviceClass":"line","setting":{},"triportSourcePort":22},{"port":[5],"name":"PotentiometerE","customName":false,"deviceType":"Potentiometer","deviceClass":"pot","setting":{},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.6","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}
