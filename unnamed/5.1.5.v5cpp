{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor MotorR = motor(PORT1, ratio18_1, false);\n\nmotor MotorL = motor(PORT2, ratio18_1, false);\n\nled LEDA = led(Brain.ThreeWirePort.A);\nbumper BumperB = bumper(Brain.ThreeWirePort.B);\nlimit LimitSwitchD = limit(Brain.ThreeWirePort.D);\nline LineTrackerC = line(Brain.ThreeWirePort.C);\npot PotentiometerE = pot(Brain.ThreeWirePort.E);\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint ac_row = 1;\nint ac_col = 1;\n\n// Set both motors spinning\nvoid setAllMotors(vex::directionType dirType) {\n  MotorL.spin(dirType);\n  MotorR.spin(dirType);\n}\n\n// Stop both motors\nvoid stopAllMotors() {\n  MotorL.stop();\n  MotorR.stop();\n}\n\nvoid ac_Reset() { /* Reset row & column */ ac_row = 1; ac_col = 1; }\n\nvoid ac_Print(char* string) {\n  // This basically makes it easier to print things to the screen without setting cursor.\n  Brain.Screen.setCursor(ac_row, ac_col);\n  Brain.Screen.print(string);\n  ac_row++;\n}\n\nvoid ac_Clear() {\n  Brain.Screen.clearScreen();\n  ac_Reset();\n}\n\nvoid ac_Init() {\n  // Motor test\n  MotorL.setStopping(coast);\n  MotorR.setStopping(coast);\n  setAllMotors(forward);\n  wait(0.25, seconds);\n  stopAllMotors();\n  MotorL.setPosition(0, degrees);\n  MotorR.setPosition(0, degrees);\n  Brain.Screen.clearScreen();\n  // The entirety of this next section is dedicated to making sure our parts are setup the right way\n  ac_Print(\"Setup,\");\n  ac_Print(\"Motors:\");\n  ac_Print(\"Left: Port 2\");\n  ac_Print(\"Right: Port 1\");\n  ac_Print(\"3 Wire:\");\n  ac_Print(\"LEDA, BumperB, LineTrackerC, LimitSwitchD\");\n  ac_Print(\"PotentiometerE\");\n  wait(1, seconds);\n  ac_Clear();\n}\n\nint main() {\n  ac_Init(); // Self-made init function\n  while(true) {\n    if(LineTrackerC.reflectivity() > 20) {\n      setAllMotors(forward); // This is a self-made function to set both motors the direction specified\n      // it makes things easier\n      MotorL.setVelocity(LineTrackerC.reflectivity(), percent);\n      // Set MotorL speed to line tracker's reflectivity (bright/dark)\n      MotorR.setVelocity(-LineTrackerC.reflectivity(), percent);\n      // Negative of MotorL's speed\n      LEDA.on();\n    } else {\n      stopAllMotors();\n      LEDA.off();\n    }\n  }\n  return 0; // Exit gracefully\n}\n","textLanguage":"cpp","rconfig":[{"port":[1],"name":"MotorR","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"MotorL","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1],"name":"LEDA","customName":false,"deviceType":"LED","deviceClass":"led","setting":{},"triportSourcePort":22},{"port":[2],"name":"BumperB","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[4],"name":"LimitSwitchD","customName":false,"deviceType":"LimitSwitch","deviceClass":"limit","setting":{},"triportSourcePort":22},{"port":[3],"name":"LineTrackerC","customName":false,"deviceType":"LineTracker","deviceClass":"line","setting":{},"triportSourcePort":22},{"port":[5],"name":"PotentiometerE","customName":false,"deviceType":"Potentiometer","deviceClass":"pot","setting":{},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.6","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}
